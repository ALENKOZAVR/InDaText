#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ CharRNN
"""

import torch
import argparse
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('src')

from src.model import CharRNN
from src.infer import TextGenerator
from src.utils import load_text_and_charset
from src.config import load_config


def load_model_and_generator(config_path="config.json"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(config_path)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    if config.system['device'] == "auto":
        device = "cuda" if torch.cuda.is_available() else "cpu"
    else:
        device = config.system['device']
    
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
    _, _, charset, stoi, itos, vocab_size, _ = load_text_and_charset(
        text_path=config.data['text_path'],
        charset_path=config.data['charset_path']
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = CharRNN(
        vocab_size=vocab_size,
        hidden_size=config.model['hidden_size'],
        num_layers=config.model['num_layers'],
        dropout=config.model['dropout']
    ).to(device)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç
    checkpoint_path = config.paths['checkpoint_path']
    if not os.path.exists(checkpoint_path):
        print(f"‚ùå –ß–µ–∫–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {checkpoint_path}")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python train.py")
        sys.exit(1)
    
    try:
        checkpoint = torch.load(checkpoint_path, map_location=device)
        model.load_state_dict(checkpoint["model_state_dict"])
        epoch = checkpoint.get("epoch", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å —ç–ø–æ—Ö–∏ {epoch}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞: {e}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = TextGenerator(model, stoi, itos, charset, device)
    
    return generator, config


def main():
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å CharRNN")
    
    parser.add_argument("--prompt", type=str, default="", 
                       help="–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    parser.add_argument("--length", type=int, default=300,
                       help="–î–ª–∏–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)")
    parser.add_argument("--temperature", type=float, default=1.0,
                       help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ (0.1-2.0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0)")
    parser.add_argument("--top_k", type=int, default=0,
                       help="Top-k —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)")
    parser.add_argument("--top_p", type=float, default=0.0,
                       help="Top-p nucleus sampling (0.0-1.0, 0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
    parser.add_argument("--samples", type=int, default=1,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)")
    parser.add_argument("--config", type=str, default="config.json",
                       help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    parser.add_argument("--creative", action="store_true",
                       help="–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (temperature=1.3, top_p=0.9)")
    parser.add_argument("--conservative", action="store_true", 
                       help="–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (temperature=0.7, top_k=50)")
    parser.add_argument("--balanced", action="store_true",
                       help="–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (temperature=0.9, top_k=100)")
    
    args = parser.parse_args()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    if args.creative:
        args.temperature = 1.3
        args.top_p = 0.9
        args.top_k = 0
        print("üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    elif args.conservative:
        args.temperature = 0.7
        args.top_k = 50
        args.top_p = 0.0
        print("üéØ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    elif args.balanced:
        args.temperature = 0.9
        args.top_k = 100
        args.top_p = 0.0
        print("‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.temperature <= 0:
        print("‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        sys.exit(1)
    
    if args.top_p < 0 or args.top_p > 1:
        print("‚ùå top_p –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0.0 –∏ 1.0")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    print("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    generator, config = load_model_and_generator(args.config)
    
    # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print("\n" + "="*60)
    print("–ü–ê–†–ê–ú–ï–¢–†–´ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
    print(f"üìù –ü—Ä–æ–º–ø—Ç: '{args.prompt}' (–ø—É—Å—Ç–æ–π = —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ä—Ç)")
    print(f"üìè –î–ª–∏–Ω–∞: {args.length}")
    print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {args.temperature}")
    if args.top_k > 0:
        print(f"üîù Top-k: {args.top_k}")
    if args.top_p > 0:
        print(f"üéØ Top-p: {args.top_p}")
    print(f"üé≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {args.samples}")
    print("="*60)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if args.samples == 1:
        print("\nüöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
        result = generator.generate(
            prompt=args.prompt,
            max_len=args.length,
            temperature=args.temperature,
            top_k=args.top_k,
            top_p=args.top_p
        )
        print("\nüìñ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("-" * 40)
        print(result)
        print("-" * 40)
    else:
        print(f"\nüöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {args.samples} –æ–±—Ä–∞–∑—Ü–æ–≤...")
        for i in range(args.samples):
            result = generator.generate(
                prompt=args.prompt,
                max_len=args.length,
                temperature=args.temperature,
                top_k=args.top_k,
                top_p=args.top_p
            )
            print(f"\nüìñ –û–ë–†–ê–ó–ï–¶ {i+1}:")
            print("-" * 40)
            print(result)
            print("-" * 40)
    
    print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()